var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/generate.ts
import { parse } from "path";

// src/utils.ts
import fs from "fs";
import { resolve, basename } from "path";
import Debug from "debug";
import deepEqual from "deep-equal";
import { toArray, slash } from "@antfu/utils";

// src/parser.ts
import JSON5 from "json5";
import YAML from "yaml";
async function parseSFC(code) {
  try {
    const { parse: parse2 } = await import("@vue/compiler-sfc");
    return parse2(code, {
      pad: "space"
    }).descriptor;
  } catch {
    throw new Error(`[vite-plugin-pages] Vue3's "@vue/compiler-sfc" is required.`);
  }
}
function parseCustomBlock(block, filePath, options) {
  var _a;
  const lang = (_a = block.lang) != null ? _a : options.routeBlockLang;
  if (lang === "json5") {
    try {
      return JSON5.parse(block.content);
    } catch (err) {
      throw new Error(`Invalid JSON5 format of <${block.type}> content in ${filePath}
${err.message}`);
    }
  } else if (lang === "json") {
    try {
      return JSON.parse(block.content);
    } catch (err) {
      throw new Error(`Invalid JSON format of <${block.type}> content in ${filePath}
${err.message}`);
    }
  } else if (lang === "yaml" || lang === "yml") {
    try {
      return YAML.parse(block.content);
    } catch (err) {
      throw new Error(`Invalid YAML format of <${block.type}> content in ${filePath}
${err.message}`);
    }
  }
}

// src/constants.ts
var MODULE_IDS = ["pages-generated", "virtual:generated-pages", "virtual:generated-pages-react"];
var MODULE_ID_VIRTUAL = "/@vite-plugin-pages/generated-pages";

// src/utils.ts
var routeBlockCache = new Map();
function extensionsToGlob(extensions) {
  return extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0] || "";
}
function isPagesDir(path, options) {
  for (const page of options.pagesDir) {
    const dirPath = slash(resolve(options.root, page.dir));
    if (path.startsWith(dirPath))
      return true;
  }
  return false;
}
function isTarget(path, options) {
  return isPagesDir(path, options) && options.extensionsRE.test(path);
}
var debug = {
  hmr: Debug("vite-plugin-pages:hmr"),
  parser: Debug("vite-plugin-pages:parser"),
  gen: Debug("vite-plugin-pages:gen"),
  options: Debug("vite-plugin-pages:options"),
  cache: Debug("vite-plugin-pages:cache"),
  pages: Debug("vite-plugin-pages:pages")
};
var dynamicRouteRE = /^\[.+\]$/;
var nuxtDynamicRouteRE = /^_[\s\S]*$/;
function isDynamicRoute(routePath, nuxtStyle = false) {
  return nuxtStyle ? nuxtDynamicRouteRE.test(routePath) : dynamicRouteRE.test(routePath);
}
function isCatchAllRoute(routePath, nuxtStyle = false) {
  return nuxtStyle ? /^_$/.test(routePath) : /^\[\.{3}/.test(routePath);
}
function resolveImportMode(filepath, options) {
  const mode = options.importMode;
  if (typeof mode === "function")
    return mode(filepath);
  for (const pageDir of options.pagesDir) {
    if (options.syncIndex && pageDir.baseRoute === "" && filepath === `/${pageDir.dir}/index.vue`)
      return "sync";
  }
  return mode;
}
function pathToName(filepath) {
  return filepath.replace(/[_.\-\\/]/g, "_").replace(/[[:\]()]/g, "$");
}
async function getRouteBlock(path, options) {
  const content = fs.readFileSync(path, "utf8");
  const parsed = await parseSFC(content);
  const blockStr = parsed.customBlocks.find((b) => b.type === "route");
  if (!blockStr)
    return null;
  const result = parseCustomBlock(blockStr, path, options);
  debug.parser("%s: %O", path, result);
  routeBlockCache.set(slash(path), result);
  return result;
}
function getPagesVirtualModule(server) {
  const { moduleGraph } = server;
  const module = moduleGraph.getModuleById(MODULE_ID_VIRTUAL);
  if (module) {
    moduleGraph.invalidateModule(module);
    return module;
  }
  return null;
}
function replaceSquareBrackets(bundle) {
  const files = Object.keys(bundle).map((i) => basename(i));
  for (const chunk of Object.values(bundle)) {
    chunk.fileName = chunk.fileName.replace(/(\[|\])/g, "_");
    if (chunk.type === "chunk") {
      for (const file of files)
        chunk.code = chunk.code.replace(file, file.replace(/(\[|\])/g, "_"));
    }
  }
}
async function isRouteBlockChanged(filePath, options) {
  debug.cache(routeBlockCache);
  const oldRouteBlock = routeBlockCache.get(filePath);
  const routeBlock = await getRouteBlock(filePath, options);
  debug.hmr("%s old: %O", filePath, oldRouteBlock);
  debug.hmr("%s new: %O", filePath, routeBlock);
  return !deepEqual(oldRouteBlock, routeBlock);
}

// src/stringify.ts
var componentRE = /"component":("(.*?)")/g;
var hasFunctionRE = /"(?:props|beforeEnter)":("(.*?)")/g;
var multilineCommentsRE = /\/\*(.|[\r\n])*?\*\//gm;
var singlelineCommentsRE = /\/\/.*/g;
function replaceFunction(_, value) {
  if (value instanceof Function || typeof value === "function") {
    const fnBody = value.toString().replace(multilineCommentsRE, "").replace(singlelineCommentsRE, "").replace(/(\t|\n|\r|\s)/g, "");
    if (fnBody.length < 8 || fnBody.substring(0, 8) !== "function")
      return `_NuFrRa_${fnBody}`;
    return fnBody;
  }
  return value;
}
function stringifyRoutes(preparedRoutes, options) {
  const imports = [];
  function componentReplacer(str, replaceStr, path) {
    const mode = resolveImportMode(path, options);
    if (mode === "sync") {
      const importName = pathToName(path);
      const importStr = `import ${importName} from '${path}'`;
      if (!imports.includes(importStr))
        imports.push(importStr);
      return str.replace(replaceStr, importName);
    } else {
      return str.replace(replaceStr, `() => import('${path}')`);
    }
  }
  function functionReplacer(str, replaceStr, content) {
    if (content.startsWith("function"))
      return str.replace(replaceStr, content);
    if (content.startsWith("_NuFrRa_"))
      return str.replace(replaceStr, content.slice(8));
    return str;
  }
  const stringRoutes = JSON.stringify(preparedRoutes, replaceFunction).replace(componentRE, componentReplacer).replace(hasFunctionRE, functionReplacer);
  return {
    imports,
    stringRoutes
  };
}

// src/pages.ts
import { join, extname, resolve as resolve2 } from "path";

// src/files.ts
import fg from "fast-glob";
function getIgnore(exclude) {
  return ["node_modules", ".git", "**/__*__/**", ...exclude];
}
function getPageDirs(pageDirOptions, root, exclude) {
  const dirs = fg.sync(pageDirOptions.dir, {
    ignore: getIgnore(exclude),
    onlyDirectories: true,
    dot: true,
    unique: true,
    cwd: root
  });
  const pageDirs = dirs.map((dir) => __spreadProps(__spreadValues({}, pageDirOptions), {
    dir
  }));
  return pageDirs;
}
function getPageFiles(path, options) {
  const {
    exclude,
    extensions
  } = options;
  const ext = extensionsToGlob(extensions);
  const files = fg.sync(`**/*.${ext}`, {
    ignore: getIgnore(exclude),
    onlyFiles: true,
    cwd: path
  });
  return files;
}

// src/pages.ts
function removePage(pages, file) {
  pages.delete(file);
}
function updatePage(pages, file) {
  const page = pages.get(file);
  if (page) {
    const customBlock = routeBlockCache.get(file) || null;
    page.customBlock = customBlock;
    pages.set(file, page);
  }
}
async function addPage(pages, file, options) {
  file = file.replace(options.root, "");
  const pageDir = options.pagesDir.find((i) => file.startsWith(`/${i.dir}`));
  if (!pageDir)
    return;
  await setPage(pages, pageDir, file.replace(`/${pageDir.dir}/`, ""), options);
}
async function resolvePages(options) {
  const dirs = toArray(options.pagesDir);
  const pages = new Map();
  const pageDirFiles = dirs.map((pageDir) => {
    const pagePath = slash(resolve2(options.root, pageDir.dir));
    return __spreadProps(__spreadValues({}, pageDir), {
      files: getPageFiles(pagePath, options)
    });
  });
  for (const pageDir of pageDirFiles) {
    for (const file of pageDir.files)
      await setPage(pages, pageDir, file, options);
  }
  const routes = [];
  for (const page of pages.values()) {
    if (!routes.includes(page.route))
      routes.push(page.route);
    else
      throw new Error(`[vite-plugin-pages] duplicate route in ${page.filepath}`);
  }
  return pages;
}
async function setPage(pages, pageDir, file, options) {
  const component = slash(join(pageDir.dir, file));
  const filepath = slash(resolve2(options.root, component));
  const extension = extname(file).slice(1);
  const customBlock = ["vue", "md"].includes(extension) ? await getRouteBlock(filepath, options) : null;
  pages.set(filepath, {
    dir: pageDir.dir,
    route: slash(join(pageDir.baseRoute, file.replace(options.extensionsRE, ""))),
    extension,
    filepath,
    component,
    customBlock
  });
}
function countSlash(value) {
  return (value.match(/\//g) || []).length;
}
function sortPages(pages) {
  return [...pages].map(([_, value]) => value).sort((a, b) => {
    return countSlash(a.route) - countSlash(b.route);
  });
}

// src/generate.ts
function prepareRoutes(routes, options, parent) {
  var _a;
  for (const route of routes) {
    if (route.name)
      route.name = route.name.replace(/-index$/, "");
    if (parent)
      route.path = route.path.replace(/^\//, "");
    if (!options.react)
      route.props = true;
    if (options.react) {
      delete route.name;
      route.routes = route.children;
      delete route.children;
      route.exact = true;
    }
    if (route.children) {
      delete route.name;
      route.children = prepareRoutes(route.children, options, route);
    }
    if (!options.react)
      Object.assign(route, route.customBlock || {});
    delete route.customBlock;
    Object.assign(route, ((_a = options.extendRoute) == null ? void 0 : _a.call(options, route, parent)) || {});
  }
  return routes;
}
function generateRoutes(pages, options) {
  const {
    nuxtStyle
  } = options;
  const routes = [];
  sortPages(pages).forEach((page) => {
    const pathNodes = page.route.split("/");
    const component = page.component.startsWith("/") ? page.component : `/${page.component}`;
    const route = {
      name: "",
      path: "",
      component,
      customBlock: page.customBlock
    };
    let parentRoutes = routes;
    for (let i = 0; i < pathNodes.length; i++) {
      const node = pathNodes[i];
      const isDynamic = isDynamicRoute(node, nuxtStyle);
      const isCatchAll = isCatchAllRoute(node, nuxtStyle);
      const normalizedName = isDynamic ? nuxtStyle ? isCatchAll ? "all" : node.replace(/^_/, "") : node.replace(/^\[(\.{3})?/, "").replace(/\]$/, "") : node;
      const normalizedPath = normalizedName.toLowerCase();
      route.name += route.name ? `-${normalizedName}` : normalizedName;
      const parent = parentRoutes.find((node2) => node2.name === route.name);
      if (parent) {
        parent.children = parent.children || [];
        parentRoutes = parent.children;
        route.path = "";
      } else if (normalizedName.toLowerCase() === "index" && !route.path) {
        route.path += "/";
      } else if (normalizedName.toLowerCase() !== "index") {
        if (isDynamic) {
          route.path += `/:${normalizedName}`;
          if (isCatchAll)
            route.path += "(.*)*";
        } else {
          route.path += `/${normalizedPath}`;
        }
      }
    }
    parentRoutes.push(route);
  });
  const preparedRoutes = prepareRoutes(routes, options);
  let finalRoutes = preparedRoutes.sort((a, b) => {
    if (a.path.includes(":") && b.path.includes(":"))
      return b.path > a.path ? 1 : -1;
    else if (a.path.includes(":") || b.path.includes(":"))
      return a.path.includes(":") ? 1 : -1;
    else
      return b.path > a.path ? 1 : -1;
  });
  const allRoute = finalRoutes.find((i) => {
    return isCatchAllRoute(parse(i.component).name, nuxtStyle);
  });
  if (allRoute) {
    finalRoutes = finalRoutes.filter((i) => !isCatchAllRoute(parse(i.component).name, nuxtStyle));
    finalRoutes.push(allRoute);
  }
  return finalRoutes;
}
function generateClientCode(routes, options) {
  const { imports, stringRoutes } = stringifyRoutes(routes, options);
  return `${imports.join(";\n")};

const routes = ${stringRoutes};

export default routes;`;
}

// src/options.ts
import { resolve as resolve3 } from "path";
function resolvePageDirs(pagesDir, root, exclude) {
  pagesDir = toArray(pagesDir);
  return pagesDir.flatMap((pagesDir2) => {
    const option = typeof pagesDir2 === "string" ? { dir: pagesDir2, baseRoute: "" } : pagesDir2;
    option.dir = slash(resolve3(root, option.dir)).replace(`${root}/`, "");
    option.baseRoute = option.baseRoute.replace(/^\//, "").replace(/\/$/, "");
    return getPageDirs(option, root, exclude);
  });
}
function resolveOptions(userOptions, viteRoot) {
  const {
    pagesDir = ["src/pages"],
    routeBlockLang = "json5",
    exclude = [],
    syncIndex = true,
    replaceSquareBrackets: replaceSquareBrackets2 = false,
    nuxtStyle = false,
    react = false,
    extendRoute,
    onRoutesGenerated,
    onClientGenerated
  } = userOptions;
  const root = viteRoot || slash(process.cwd());
  const importMode = userOptions.importMode || (react ? "sync" : "async");
  const extensions = userOptions.extensions || (react ? ["tsx", "jsx"] : ["vue", "ts", "js"]);
  const extensionsRE = new RegExp(`\\.(${extensions.join("|")})$`);
  const resolvedPagesDir = resolvePageDirs(pagesDir, root, exclude);
  const resolvedOptions = {
    pagesDir: resolvedPagesDir,
    routeBlockLang,
    root,
    extensions,
    importMode,
    exclude,
    syncIndex,
    replaceSquareBrackets: replaceSquareBrackets2,
    nuxtStyle,
    react,
    extensionsRE,
    extendRoute,
    onRoutesGenerated,
    onClientGenerated
  };
  return resolvedOptions;
}

// src/hmr.ts
function handleHMR(server, pages, options, clearRoutes) {
  const { ws, watcher } = server;
  function fullReload() {
    getPagesVirtualModule(server);
    clearRoutes();
    ws.send({
      type: "full-reload"
    });
  }
  watcher.on("add", async (file) => {
    const path = slash(file);
    if (isTarget(path, options)) {
      await addPage(pages, path, options);
      debug.hmr("add", path);
      fullReload();
    }
  });
  watcher.on("unlink", (file) => {
    const path = slash(file);
    if (isTarget(path, options)) {
      removePage(pages, path);
      debug.hmr("remove", path);
      fullReload();
    }
  });
  watcher.on("change", async (file) => {
    const path = slash(file);
    if (isTarget(path, options) && !options.react) {
      const needReload = await isRouteBlockChanged(path, options);
      if (needReload) {
        updatePage(pages, path);
        debug.hmr("change", path);
        fullReload();
      }
    }
  });
}

// src/index.ts
function pagesPlugin(userOptions = {}) {
  let generatedRoutes = null;
  let options;
  let pages;
  return {
    name: "vite-plugin-pages",
    enforce: "pre",
    async configResolved({ root }) {
      options = resolveOptions(userOptions, root);
      pages = await resolvePages(options);
      debug.options(options);
      debug.pages(pages);
    },
    configureServer(server) {
      handleHMR(server, pages, options, () => {
        generatedRoutes = null;
      });
    },
    resolveId(id) {
      return MODULE_IDS.includes(id) || MODULE_IDS.some((i) => id.startsWith(i)) ? MODULE_ID_VIRTUAL : null;
    },
    async load(id) {
      var _a, _b;
      if (id !== MODULE_ID_VIRTUAL)
        return;
      if (!generatedRoutes) {
        generatedRoutes = [];
        generatedRoutes = generateRoutes(pages, options);
        generatedRoutes = await ((_a = options.onRoutesGenerated) == null ? void 0 : _a.call(options, generatedRoutes)) || generatedRoutes;
      }
      debug.gen("routes: %O", generatedRoutes);
      let clientCode = generateClientCode(generatedRoutes, options);
      clientCode = await ((_b = options.onClientGenerated) == null ? void 0 : _b.call(options, clientCode)) || clientCode;
      return clientCode;
    },
    async transform(_code, id) {
      if (!/vue&type=route/.test(id))
        return;
      return {
        code: "export default {};",
        map: null
      };
    },
    generateBundle(_options, bundle) {
      if (options.replaceSquareBrackets)
        replaceSquareBrackets(bundle);
    }
  };
}
var src_default = pagesPlugin;
export {
  src_default as default,
  generateRoutes
};
